static只能修饰成员（成员变量，成员函数），不能修饰局部，静态修饰的内容被对象所共享。
当成员被静态修饰后，可以被对象调用，也可以被类调用。格式：类名.静态成员
class Person
{
	String name;		//成员变量 实例变量
	Static String country = "CN";		//静态的成员变量 类变量
	
	public void show(){

			System.out.println(name+" "+country);


			}
	
}


class StaticDemo{
	
	public static void main(String[] args){

	System.out.println(Person.country);	//被类调用


	Person p = new Person();		//常规调用
	p.name = "zhangsan"
	p.show();
	System.out.println(p.country);	
	}


}


static特点：
静态随着类的加载而加载，随着类的消失而消失，说明他的生命周期最长
优先于对象存在
被所有对象所共享
可以直接被类名所调用

实例变量和类变量的区别
存放位置：类变量随着类的加载而存在于方法区中。实例变量随着对象的建立而存在于堆内存中、
生命周期：类变量生命周期最长，随着类的消失而消失。实例变量随着对象的消失而消失


静态的使用注意事项：
静态方法只能访问静态成员 非静态方法可以访问静态成员
静态方法中不可以定义this super关键字 ，因为静态优先于对象存在


静态好处：对对象共享的数据进行单独空间的存储，节省空间。
	可以直接被类名调用

弊端: 生命周期过长，访问出现局限性



主函数：一个特殊的函数，作为程序的入口，可以被jvm调用
主函数定义：
public代表改函数的访问权限是最大的
static代表着主函数随着类的加载就已经存在了
void没有具体的返回值
main不是关键字，但是是一个特殊的单词，可以被jvm识别。
函数的参数（String[] args ）为一个字符串类型数组	arg为arguments的简称（参数）
主函数固定格式，重载函数允许存在，但虚拟机总是优先调用主函数
jvm在调用主函数时，传入的是new String[0];


什么时候使用静态：要从两方面下手。
什么时候定义静态变量呢：当对象中出现共享数据时，该数据被静态所修饰，对象中的特有数据要定义成非静态存在于堆内存中
什么时候定义静态类呢：当功能内部没有访问到非静态数据（对象特有数据），该功能可以定义成静态的，比如
class Person

{
	String name；
	public static void show()	//show方法没有用到name，就定义为静态的，由类直接调用。
	{
		System.out.println("123");

	}


}。